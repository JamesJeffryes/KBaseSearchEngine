package kbaserelationengine.events.handler;

import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import kbaserelationengine.events.ObjectStatusEvent;
import kbaserelationengine.events.ObjectStatusEventType;
import us.kbase.common.service.JsonClientException;
import us.kbase.common.service.Tuple11;
import workspace.ObjectIdentity;
import workspace.WorkspaceClient;

/** A handler for events generated by the workspace service.
 * @author gaprice@lbl.gov
 *
 */
public class WorkspaceEventHandler implements EventHandler {

    /** The storage code for workspace events. */
    public static final String STORAGE_CODE = "WS";
    
    private final WorkspaceClient ws;
    
    /** Create a handler.
     * @param wsClient a workspace client to use when contacting the workspace service.
     */
    public WorkspaceEventHandler(final WorkspaceClient wsClient) {
        ws = wsClient;
    }

    @Override
    public Iterable<ObjectStatusEvent> expand(final ObjectStatusEvent event) {
        if (ObjectStatusEventType.NEW_ALL_VERSIONS.equals(event.getEventType())) {
            return handleNewAllVersions(event);
        } else {
            return Arrays.asList(event);
        }
    }

    private Iterable<ObjectStatusEvent> handleNewAllVersions(
            final ObjectStatusEvent event) {
        final long objid;
        try {
            objid = Long.parseLong(event.getAccessGroupObjectId());
        } catch (NumberFormatException ne) {
            //TODO this exception should prevent the event from being processed again
            throw new IllegalStateException("Illegal workspace object id: " +
                    event.getAccessGroupObjectId());
        }
        final List<Tuple11<Long, String, String, String, Long, String, Long, String,
                String, Long, Map<String, String>>> objs;
        try {
            objs = ws.getObjectHistory(new ObjectIdentity()
                    .withWsid((long) event.getAccessGroupId())
                    .withObjid(objid));
        } catch (JsonClientException | IOException e) {
            //TODO some of these exceptions should be retries, some should shut down the event loop until the issue can be fixed (e.g. bad token, ws down)
            throw new IllegalStateException("Error contacting workspace: " + e.getMessage(),
                    e);
        }
        final List<ObjectStatusEvent> events = new LinkedList<>();
        for (final Tuple11<Long, String, String, String, Long, String, Long, String, String,
                Long, Map<String, String>> obj: objs) {
            events.add(new ObjectStatusEvent(
                    null, // no mongo id
                    STORAGE_CODE,
                    event.getAccessGroupId(),
                    event.getAccessGroupObjectId(),
                    Math.toIntExact(obj.getE5()), // vers are always ints
                    null, // not a share
                    event.getTimestamp(),
                    obj.getE3().split("-")[0],
                    ObjectStatusEventType.NEW_VERSION,
                    event.isGlobalAccessed()));
        }
        return events;
    }

}
